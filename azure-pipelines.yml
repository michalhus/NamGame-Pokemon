# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# PR Trigger, see Build Validation and Branch Policies
# https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies
trigger:
    branches:
        include:
        - master
        - feature/*
        exclude:
        - releases/*
    paths:
        include:
        - '*' # same as '/' for the repository root
        exclude:
        - 'docs/*' # same as 'docs/'
  
# https://docs.microsoft.com/azure/devops/pipelines/ecosystems/xcode
pool:
  vmImage: 'macos-latest'

# Variables used later in Pipeline, see usage in Steps below
variables:
  scheme: 'Name Game'
  name: 'Name Game'
  sdk: 'iphoneos'
  projectName: $(name).xcodeproj
  configuration: 'Release'
  testScheme: 'Name GameUITests'

steps:
- task: Xcode@5
  displayName: 'Project Build'
  inputs:
    actions: 'build'
    sdk: '$(sdk)'
    scheme: '$(scheme)'
    configuration: '$(configuration)'
    xcodeVersion: 'default' # Options: default, 10, 9, 8, specifyPath
    exportPath: '$(agent.buildDirectory)/output/$(sdk)/$(configuration)'
    packageApp: false
    useXcpretty: 'false' # Makes it easier to diagnose build failures


#WIP
#- task: Xcode@5
#  displayName: 'UI Tests'
#  inputs:
#    actions: test -only-testing:NameGameUITests
#    configuration: Debug
#    sdk: $(sdk)
#    scheme: $(scheme)
#    xcodeVersion: 'default'
#    useXcpretty: true
#    destinationPlatformOption: iOS
#    destinationSimulators: 'iPhone 11'
#    publishJUnitResults: true
#    xcWorkspacePath: $(projectName)
#
#



#- task: Xcode@5
#  displayName: Project Build
#  inputs:
#    actions: 'build'
#    scheme: ''
#    sdk: 'iphoneos'
#    configuration: 'Release'
#    xcWorkspacePath: '**/*.xcodeproj/project.xcworkspace'
#    xcodeVersion: 'default' # Options: 8, 9, 10, default, specifyPath
#    signingOption: 'default' # Options: nosign, default, manual, auto
#    useXcpretty: 'false' # Makes it easier to diagnose build failures

        
##jobs:
##- ${{ each config in parameters.configs }}:
##  - job: Build${{ config }}
#    displayName: Project Build
#    steps:
##      - task: Xcode@5
##        displayName: Unit Tests
##        inputs:
##          actions: test -only-testing:Mastercard-iOSTests
##          configuration: Debug
##          sdk: $(sdk)
##          scheme: $(scheme)
##          xcodeVersion: 'default'
##          useXcpretty: true
##          destinationPlatformOption: iOS
##          destinationSimulators: 'iPhone 11'
##          publishJUnitResults: true
##          xcWorkspacePath: $(projectName)
#
#      - task: Xcode@5
#        displayName: UI Tests
#        inputs:
#          actions: test -only-testing:Name GameUITests
#          configuration: Debug
#          sdk: $(sdk)
#          scheme: $(scheme)
#          xcodeVersion: 'default'
#          useXcpretty: true
#          destinationPlatformOption: iOS
#          destinationSimulators: 'iPhone 11'
#          publishJUnitResults: true
#          xcWorkspacePath: $(projectName)
